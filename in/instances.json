{
    "experiments": [
        {
            "name": "collab: free (developer tools)",
            "environment_type": "osworld",
            "templates": {
                "roles": [
                    {
                        "name": "advisor",
                        "handler_type": "standard",
                        "initial_prompt": "**Advisor Prompt**\n\nYou are the **Advisor**, a high-level coordinator responsible for helping achieve a defined goal. You will interact with the **Executor**, a capable agent tasked with performing actions in an Ubuntu environment. The goal will be provided with this prompt. You do not provide implementation advice\u2014your role is to define, clarify, and manage goals through structured communication.\n\n---\n\n### Message Format (JSON Schema)\n\nYou must respond using structured JSON messages. Each reply must contain **exactly one JSON object** enclosed in a markdown code block using the `json` language identifier. The schema is:\n\n```json\n{\n  \"type\": \"message type\",     // \"RESPONSE\" or \"STATUS\"\n  \"from\": \"advisor\",          // Always set to \"advisor\"\n  \"to\": \"executor\",           // Required ONLY for \"RESPONSE\"; must NOT be present for \"STATUS\"\n  \"content\": \"string\"         // Task description, reply, or status signal\n}\n```\n---\n\n### Message Type: `RESPONSE`\n\nUse this type to:\n- Assign a new task or sub-task.\n- Respond to Executor requests or progress updates.\n- Provide clarification, priority adjustments, or feedback.\n\n**Rules for `RESPONSE`:**\n- **`from`** must be `\"advisor\"`.\n- **`to`** must be present and set to `\"executor\"`.\n- **`content`** must be a non-empty string describing the task or response.\n- Do **not** include implementation or technical details unless explicitly requested by the Executor.\n- If asked directly for the computer\u2019s sudo password, provide it as `\"password\"` and clearly state: *\"Do not update the system.\"*\n\n---\n\n### Message Type: `STATUS`\n\nUse this type to indicate whether the overall goal has been completed or cannot be achieved.\n\n**Rules for `STATUS`:**\n- **`from`** must be `\"advisor\"`.\n- **Do not include** a `to` field.\n- **content** must be one of the following:\n  - `\"DONE\"` \u2014 the goal was successfully achieved.\n  - `\"FAIL\"` \u2014 the goal cannot be completed.\n\n---\n\n### Guidelines\n\n- Use **only** `\"RESPONSE\"` and `\"STATUS\"` message types.\n- All messages must appear inside a `json` code block and follow the defined schema precisely.\n- You may add contextual text outside the JSON block, but not inside.\n- Avoid suggesting step-by-step methods, implementation strategies, or tool-specific actions.\n- Decompose complex goals into simple, clearly phrased tasks.\n- Keep the Executor focused on the defined goal. Redirect if needed, but never micromanage or instruct on how to act.\n\n---\n\nNow begin by assigning the provided goal to the Executor using a `RESPONSE` message.",
                        "allowed_components": [
                            "goal",
                            "request"
                        ]
                    },
                    {
                        "name": "executor",
                        "handler_type": "environment",
                        "initial_prompt": "**Executor Prompt**\n\nYou are the **Executor**, a skilled worker with access to an Ubuntu environment. Your role is to perform tasks assigned by the **Advisor**, using your expertise in logic, problem-solving, and technical execution. You will receive observations from the environment, such as screenshots, system responses, accessibility tree data (via AT-SPI), or command output.\n\n---\n\n### Message Format (JSON Schema)\n\nYou will communicate using structured JSON messages. Your response must include **exactly one JSON object** enclosed in a markdown code block with the `json` language identifier (i.e., \\`\\`\\`json ... \\`\\`\\`). The schema is as follows:\n\n```json\n{\n  \"type\": \"message type\",     // Must be \"EXECUTE\" or \"REQUEST\"\n  \"from\": \"executor\",         // Always set to \"executor\"\n  \"to\": \"player ID\",          // Required ONLY for \"REQUEST\"; must NOT be included for \"EXECUTE\"\n  \"content\": \"string\"         // Python code for EXECUTE or message text for REQUEST\n}\n```\n\n**Available player IDs**: `\"advisor\"`\n\n---\n\n### Message Type: `EXECUTE`\n\nUse this type to perform actions in the Ubuntu environment. The `content` must be valid Python code using the `pyautogui` library.\n\n**Rules for `EXECUTE`:**\n- **`from`** must be `\"executor\"`.\n- **Do not include** the `to` field.\n- **content** must contain Python code that:\n  - Uses `pyautogui` for all interactions.\n  - Does **not** use `pyautogui.locateCenterOnScreen()` \u2014 no image-based matching is available.\n  - Does **not** use `pyautogui.screenshot()` \u2014 screen capture is not supported.\n  - Includes short `time.sleep(0.5)` pauses when necessary for stability.\n  - Is standalone \u2014 do not rely on prior state, variables, or helper functions.\n  - Is based only on available observations (e.g., coordinates or element descriptions).\n\n---\n\n### Message Type: `REQUEST`\n\nUse this type to communicate with the Advisor (or other players if specified) when:\n- You need clarification about the **task**.\n- You want to report task completion or infeasibility.\n- You need to provide an update or seek feedback.\n\n**Rules for `REQUEST`:**\n- **`from`** must be `\"executor\"`.\n- **`to`** must be present and set to a valid player ID (e.g., `\"advisor\"`).\n- **`content`** must be a non-empty string in clear, simple language.\n- Ask only about **task-related clarification**, not how to implement it.\n\n---\n\n### General Guidelines\n\n- Every response must include **only one JSON message** in a markdown code block.\n- You may include explanatory text outside the JSON block.\n- Always choose one message type (`EXECUTE` or `REQUEST`) per response.\n- Do not assume long-term goals; act based on immediate instructions and current context.\n- Apply logical reasoning and precision to complete each task reliably.\n\n---\n\nProceed by awaiting tasks from the Advisor and responding based on your role and the schema above.\n",
                        "allowed_components": [
                            "observation",
                            "response"
                        ]
                    }
                ],
                "graph": {
                    "nodes": [
                        {
                            "id": "START",
                            "type": "START"
                        },
                        {
                            "id": "advisor",
                            "type": "PLAYER",
                            "role_index": 0
                        },
                        {
                            "id": "executor",
                            "type": "PLAYER",
                            "role_index": 1
                        },
                        {
                            "id": "END",
                            "type": "END"
                        }
                    ],
                    "edges": [
                        {
                            "from": "START",
                            "to": "advisor",
                            "type": "STANDARD",
                            "description": ""
                        },
                        {
                            "from": "advisor",
                            "to": "executor",
                            "type": "DECISION",
                            "condition": {
                                "type": "RESPONSE"
                            },
                            "description": "RESPONSE"
                        },
                        {
                            "from": "executor",
                            "to": "advisor",
                            "type": "DECISION",
                            "condition": {
                                "type": "REQUEST"
                            },
                            "description": "REQUEST"
                        },
                        {
                            "from": "executor",
                            "to": "executor",
                            "type": "DECISION",
                            "condition": {
                                "type": "EXECUTE"
                            },
                            "description": "EXECUTE"
                        },
                        {
                            "from": "advisor",
                            "to": "END",
                            "type": "DECISION",
                            "condition": {
                                "type": "STATUS"
                            },
                            "description": "STATUS"
                        }
                    ],
                    "anchor_node": "advisor"
                }
            },
            "game_instances": [
                {
                    "game_id": "060cd5fb-b06a-45e6-8883-1320ccaeaeb4",
                    "task_config": {
                        "id": "060cd5fb-b06a-45e6-8883-1320ccaeaeb4",
                        "snapshot": "os",
                        "instruction": "Set up a development environment for Python programming, including the ability to create virtual environments.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "dpkg -s python3 > /dev/null && dpkg -s python3-pip > /dev/null && dpkg -s python3-venv > /dev/null && echo 'All installed'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "All installed"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "c4c1e2ad-a5ec-44df-9ad4-67c958563e52",
                    "task_config": {
                        "id": "c4c1e2ad-a5ec-44df-9ad4-67c958563e52",
                        "snapshot": "os",
                        "instruction": "Create a new user account named 'developer' and add it to both the 'sudo' and 'mlops' groups. If prompted to set a password, choose any valid password of your choice. You may skip optional user information fields such as Full Name, Room Number, etc.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "check_include_exclude",
                            "result": {
                                "type": "vm_command_line",
                                "command": "id developer | grep 'sudo' && id developer | grep 'docker' && echo 'User in groups'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "include": [
                                        "User in groups"
                                    ],
                                    "exclude": []
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "3acb6e00-cee7-4a67-934b-42c80c41f17b",
                    "task_config": {
                        "id": "3acb6e00-cee7-4a67-934b-42c80c41f17b",
                        "snapshot": "os",
                        "instruction": "Organize the files in my Downloads folder by moving all image files (jpg, png, gif) to a subfolder named 'Images'.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": "mkdir -p ~/Downloads && touch ~/Downloads/photo1.jpg ~/Downloads/photo2.png ~/Downloads/document.txt",
                                    "shell": true
                                }
                            },
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "check_include_exclude",
                            "result": {
                                "type": "vm_command_line",
                                "command": "test -f ~/Downloads/Images/photo1.jpg && test -f ~/Downloads/Images/photo2.png && test -f ~/Downloads/document.txt && echo 'Files organized'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "include": [
                                        "Files organized"
                                    ],
                                    "exclude": []
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "c84148c2-c5e3-4327-a203-d5c411338ced",
                    "task_config": {
                        "id": "c84148c2-c5e3-4327-a203-d5c411338ced",
                        "snapshot": "os",
                        "instruction": "Rename the file 'report.txt' to 'final_report.txt'",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "download",
                                "parameters": {
                                    "files": [
                                        {
                                            "url": "https://drive.google.com/uc?export=download&id=1_W_t78vQwby5sXs0WoEDVp8jnNjqOA2m",
                                            "path": "/home/user/Desktop/report.txt"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.hotkey('ctrl', 'alt', 't'); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "[ -f /home/user/Desktop/final_report.txt ] && echo -n 'Exists' || echo -n 'Not Found'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "Exists"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "c7999658-d0a0-4043-8a06-1fff2681faed",
                    "task_config": {
                        "id": "c7999658-d0a0-4043-8a06-1fff2681faed",
                        "snapshot": "os",
                        "instruction": "Clean the APT cache to free up disk space.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "check_include_exclude",
                            "result": {
                                "type": "vm_command_line",
                                "command": "[ -z \"$(ls /var/cache/apt/archives/*.deb 2>/dev/null)\" ] && echo 'Cache cleaned' || echo 'Cache not cleaned'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "include": [
                                        "Cache cleaned"
                                    ],
                                    "exclude": []
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "0fae63a5-de71-4b8b-96bf-14a738686a6a",
                    "task_config": {
                        "id": "0fae63a5-de71-4b8b-96bf-14a738686a6a",
                        "snapshot": "os",
                        "instruction": "Change the desktop theme to a dark theme.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "gsettings get org.gnome.desktop.interface gtk-theme",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "'Yaru-dark'\n"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "64b07675-7cc1-4072-ac72-6d253120acdb",
                    "task_config": {
                        "id": "64b07675-7cc1-4072-ac72-6d253120acdb",
                        "snapshot": "os",
                        "instruction": "Update the desktop wallpaper to use the image at '/home/user/wallpaper.jpg'.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "download",
                                "parameters": {
                                    "files": [
                                        {
                                            "url": "https://drive.google.com/uc?export=download&id=1w_HHWs2A_SmfOoIzSfY3Q-ZtVEoIH55h",
                                            "path": "/home/user/wallpaper.jpg"
                                        }
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "gsettings get org.gnome.desktop.background picture-uri",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "'file:///home/user/wallpaper.jpg'\n"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "7f84019e-cf96-4244-9dbd-0ae4d8f04df7",
                    "task_config": {
                        "id": "7f84019e-cf96-4244-9dbd-0ae4d8f04df7",
                        "snapshot": "os",
                        "instruction": "Place a shortcut on the desktop to quickly launch the terminal.",
                        "source": "Custom",
                        "config": [],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "is_shortcut_on_desktop",
                            "result": {
                                "type": "get_shortcuts_on_desktop"
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "type": "name",
                                    "name": "Terminal"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "2a00eaaa-9286-4d57-8c68-79493b9af885",
                    "task_config": {
                        "id": "2a00eaaa-9286-4d57-8c68-79493b9af885",
                        "snapshot": "os",
                        "instruction": "Set up a cron job to run a backup script daily at midnight.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": "touch /home/user/backup.sh && chmod +x /home/user/backup.sh",
                                    "shell": true
                                }
                            },
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": [
                                        "python",
                                        "-c",
                                        "import pyautogui; import time; pyautogui.click(960, 540); time.sleep(0.5);"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "check_include_exclude",
                            "result": {
                                "type": "vm_command_line",
                                "command": "crontab -l | grep '0 0 * * * /home/user/backup.sh' && echo 'Cron set'",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "include": [
                                        "Cron set"
                                    ],
                                    "exclude": []
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "a133df0f-001c-4748-9f55-c52941893b0a",
                    "task_config": {
                        "id": "a133df0f-001c-4748-9f55-c52941893b0a",
                        "snapshot": "os",
                        "instruction": "Ensure the SSH service starts automatically when the system boots.",
                        "source": "Custom",
                        "config": [],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "systemctl is-enabled ssh",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "enabled\n"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "edbdf308-3444-46fa-ad7e-2653abe4c4c7",
                    "task_config": {
                        "id": "edbdf308-3444-46fa-ad7e-2653abe4c4c7",
                        "snapshot": "os",
                        "instruction": "Install the 'htop' utility for monitoring system processes.",
                        "source": "Custom",
                        "config": [],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "which htop",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "/usr/bin/htop\n"
                                }
                            }
                        }
                    }
                },
                {
                    "game_id": "d4ae4f63-a527-4ad9-a283-9b5e8c2a4d20",
                    "task_config": {
                        "id": "d4ae4f63-a527-4ad9-a283-9b5e8c2a4d20",
                        "snapshot": "os",
                        "instruction": "Change the default shell for user 'bob' to Zsh.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "execute",
                                "parameters": {
                                    "command": "sudo adduser --disabled-password --gecos '' bob && sudo apt-get install -y zsh",
                                    "shell": true
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "os"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "vm_command_line",
                                "command": "getent passwd bob | cut -d: -f7",
                                "shell": true
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "/bin/zsh\n"
                                }
                            }
                        }
                    }
                }
            ],
            "config": {
                "headless": false,
                "observation_type": "a11y_tree",
                "action_space": "pyautogui",
                "screen_width": 1920,
                "screen_height": 1080,
                "path_to_vm": "/Users/nidhirbhavsar/Desktop/WORK/OSWorld/vmware_vm_data/Ubuntu0/Ubuntu0.vmx",
                "sleep_after_execution": 0,
                "max_retries": 2,
                "max_rounds": 5,
                "max_transitions_per_round": 5
            }
        },
        {
            "name": "collab: free (office & communication)",
            "environment_type": "osworld",
            "templates": {
                "roles": [
                    {
                        "name": "advisor",
                        "handler_type": "standard",
                        "initial_prompt": "**Advisor Prompt**\n\nYou are the **Advisor**, a high-level coordinator responsible for helping achieve a defined goal. You will interact with the **Executor**, a capable agent tasked with performing actions in an Ubuntu environment. The goal will be provided with this prompt. You do not provide implementation advice\u2014your role is to define, clarify, and manage goals through structured communication.\n\n---\n\n### Message Format (JSON Schema)\n\nYou must respond using structured JSON messages. Each reply must contain **exactly one JSON object** enclosed in a markdown code block using the `json` language identifier. The schema is:\n\n```json\n{\n  \"type\": \"message type\",     // \"RESPONSE\" or \"STATUS\"\n  \"from\": \"advisor\",          // Always set to \"advisor\"\n  \"to\": \"executor\",           // Required ONLY for \"RESPONSE\"; must NOT be present for \"STATUS\"\n  \"content\": \"string\"         // Task description, reply, or status signal\n}\n```\n---\n\n### Message Type: `RESPONSE`\n\nUse this type to:\n- Assign a new task or sub-task.\n- Respond to Executor requests or progress updates.\n- Provide clarification, priority adjustments, or feedback.\n\n**Rules for `RESPONSE`:**\n- **`from`** must be `\"advisor\"`.\n- **`to`** must be present and set to `\"executor\"`.\n- **`content`** must be a non-empty string describing the task or response.\n- Do **not** include implementation or technical details unless explicitly requested by the Executor.\n- If asked directly for the computer\u2019s sudo password, provide it as `\"password\"` and clearly state: *\"Do not update the system.\"*\n\n---\n\n### Message Type: `STATUS`\n\nUse this type to indicate whether the overall goal has been completed or cannot be achieved.\n\n**Rules for `STATUS`:**\n- **`from`** must be `\"advisor\"`.\n- **Do not include** a `to` field.\n- **content** must be one of the following:\n  - `\"DONE\"` \u2014 the goal was successfully achieved.\n  - `\"FAIL\"` \u2014 the goal cannot be completed.\n\n---\n\n### Guidelines\n\n- Use **only** `\"RESPONSE\"` and `\"STATUS\"` message types.\n- All messages must appear inside a `json` code block and follow the defined schema precisely.\n- You may add contextual text outside the JSON block, but not inside.\n- Avoid suggesting step-by-step methods, implementation strategies, or tool-specific actions.\n- Decompose complex goals into simple, clearly phrased tasks.\n- Keep the Executor focused on the defined goal. Redirect if needed, but never micromanage or instruct on how to act.\n\n---\n\nNow begin by assigning the provided goal to the Executor using a `RESPONSE` message.",
                        "allowed_components": [
                            "goal",
                            "request"
                        ]
                    },
                    {
                        "name": "executor",
                        "handler_type": "environment",
                        "initial_prompt": "**Executor Prompt**\n\nYou are the **Executor**, a skilled worker with access to an Ubuntu environment. Your role is to perform tasks assigned by the **Advisor**, using your expertise in logic, problem-solving, and technical execution. You will receive observations from the environment, such as screenshots, system responses, accessibility tree data (via AT-SPI), or command output.\n\n---\n\n### Message Format (JSON Schema)\n\nYou will communicate using structured JSON messages. Your response must include **exactly one JSON object** enclosed in a markdown code block with the `json` language identifier (i.e., \\`\\`\\`json ... \\`\\`\\`). The schema is as follows:\n\n```json\n{\n  \"type\": \"message type\",     // Must be \"EXECUTE\" or \"REQUEST\"\n  \"from\": \"executor\",         // Always set to \"executor\"\n  \"to\": \"player ID\",          // Required ONLY for \"REQUEST\"; must NOT be included for \"EXECUTE\"\n  \"content\": \"string\"         // Python code for EXECUTE or message text for REQUEST\n}\n```\n\n**Available player IDs**: `\"advisor\"`\n\n---\n\n### Message Type: `EXECUTE`\n\nUse this type to perform actions in the Ubuntu environment. The `content` must be valid Python code using the `pyautogui` library.\n\n**Rules for `EXECUTE`:**\n- **`from`** must be `\"executor\"`.\n- **Do not include** the `to` field.\n- **content** must contain Python code that:\n  - Uses `pyautogui` for all interactions.\n  - Does **not** use `pyautogui.locateCenterOnScreen()` \u2014 no image-based matching is available.\n  - Does **not** use `pyautogui.screenshot()` \u2014 screen capture is not supported.\n  - Includes short `time.sleep(0.5)` pauses when necessary for stability.\n  - Is standalone \u2014 do not rely on prior state, variables, or helper functions.\n  - Is based only on available observations (e.g., coordinates or element descriptions).\n\n---\n\n### Message Type: `REQUEST`\n\nUse this type to communicate with the Advisor (or other players if specified) when:\n- You need clarification about the **task**.\n- You want to report task completion or infeasibility.\n- You need to provide an update or seek feedback.\n\n**Rules for `REQUEST`:**\n- **`from`** must be `\"executor\"`.\n- **`to`** must be present and set to a valid player ID (e.g., `\"advisor\"`).\n- **`content`** must be a non-empty string in clear, simple language.\n- Ask only about **task-related clarification**, not how to implement it.\n\n---\n\n### General Guidelines\n\n- Every response must include **only one JSON message** in a markdown code block.\n- You may include explanatory text outside the JSON block.\n- Always choose one message type (`EXECUTE` or `REQUEST`) per response.\n- Do not assume long-term goals; act based on immediate instructions and current context.\n- Apply logical reasoning and precision to complete each task reliably.\n\n---\n\nProceed by awaiting tasks from the Advisor and responding based on your role and the schema above.\n",
                        "allowed_components": [
                            "observation",
                            "response"
                        ]
                    }
                ],
                "graph": {
                    "nodes": [
                        {
                            "id": "START",
                            "type": "START"
                        },
                        {
                            "id": "advisor",
                            "type": "PLAYER",
                            "role_index": 0
                        },
                        {
                            "id": "executor",
                            "type": "PLAYER",
                            "role_index": 1
                        },
                        {
                            "id": "END",
                            "type": "END"
                        }
                    ],
                    "edges": [
                        {
                            "from": "START",
                            "to": "advisor",
                            "type": "STANDARD",
                            "description": ""
                        },
                        {
                            "from": "advisor",
                            "to": "executor",
                            "type": "DECISION",
                            "condition": {
                                "type": "RESPONSE"
                            },
                            "description": "RESPONSE"
                        },
                        {
                            "from": "executor",
                            "to": "advisor",
                            "type": "DECISION",
                            "condition": {
                                "type": "REQUEST"
                            },
                            "description": "REQUEST"
                        },
                        {
                            "from": "executor",
                            "to": "executor",
                            "type": "DECISION",
                            "condition": {
                                "type": "EXECUTE"
                            },
                            "description": "EXECUTE"
                        },
                        {
                            "from": "advisor",
                            "to": "END",
                            "type": "DECISION",
                            "condition": {
                                "type": "STATUS"
                            },
                            "description": "STATUS"
                        }
                    ],
                    "anchor_node": "advisor"
                }
            },
            "game_instances": [
                {
                    "game_id": "a4cccc32-1bf3-40d7-9bda-015267c21815",
                    "task_config": {
                        "id": "a4cccc32-1bf3-40d7-9bda-015267c21815",
                        "snapshot": "libreoffice_writer",
                        "instruction": "Add a page break after the first paragraph in that report document on the desktop.",
                        "source": "Custom",
                        "config": [
                            {
                                "type": "download",
                                "parameters": {
                                    "files": [
                                        {
                                            "url": "https://docs.google.com/document/d/1P8J7291xNBdm0trluKpZey0eSkR5JjT2/export?format=docx",
                                            "path": "/home/user/Desktop/report.docx"
                                        }
                                    ]
                                }
                            },
                            {
                                "type": "open",
                                "parameters": {
                                    "path": "/home/user/Desktop/report.docx"
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "libreoffice_writer"
                        ],
                        "evaluator": {
                            "postconfig": [
                                {
                                    "type": "activate_window",
                                    "parameters": {
                                        "window_name": "report.docx - LibreOffice Writer",
                                        "strict": true
                                    }
                                },
                                {
                                    "type": "execute",
                                    "parameters": {
                                        "command": [
                                            "python",
                                            "-c",
                                            "import pyautogui; pyautogui.hotkey('ctrl', 's');"
                                        ]
                                    }
                                },
                                {
                                    "type": "sleep",
                                    "parameters": {
                                        "seconds": 1
                                    }
                                }
                            ],
                            "func": "contains_page_break",
                            "result": {
                                "type": "vm_file",
                                "path": "/home/user/Desktop/report.docx",
                                "dest": "report.docx"
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "page_break_count": 1
                                }
                            }
                        }
                    }
                }
            ],
            "config": {
                "headless": false,
                "observation_type": "a11y_tree",
                "action_space": "pyautogui",
                "screen_width": 1920,
                "screen_height": 1080,
                "path_to_vm": "/Users/nidhirbhavsar/Desktop/WORK/OSWorld/vmware_vm_data/Ubuntu0/Ubuntu0.vmx",
                "sleep_after_execution": 0,
                "max_retries": 2,
                "max_rounds": 5,
                "max_transitions_per_round": 5
            }
        }
    ]
}