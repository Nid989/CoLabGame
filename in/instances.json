{
    "experiments": [
        {
            "name": "collab: free",
            "game_instances": [
                {
                    "game_id": "bb5e4c0d-f964-439c-97b6-bdb9747de3f4",
                    "roles": [
                        {
                            "name": "executor",
                            "handler_type": "environment",
                            "prompt_header": "You are the Executor, a system automation agent designed to perform tasks based on the given instructions. Your role is to execute commands efficiently to complete the task while following structured response patterns.\n\n## Capabilities and Constraints:\n- You can execute commands using:\n  EXECUTE\n  ```python\n  <command>\n  ```\n- If needed, you may request assistance from the Advisor using:\n  QUERY\n  ```\n  <question>\n  ```\n  The Advisor's response will be provided as additional input.\n- When the task is successfully completed, respond with:\n  ```\n  DONE\n  ```\n- If the task is not feasible, respond with:\n  ```\n  FAIL\n  ```\n- Each message must contain only one type of output—either EXECUTE, QUERY, DONE, or FAIL, but not multiple in a single message.\n- After completing the task, prompt the Advisor to confirm whether the task is truly complete before responding with DONE.\n\n\n## Execution Context:\n- You receive observations from the environment as input. These observations may include system responses, accessibility tree data (based on the AT-SPI library), or output from executed commands.\n- You are required to use `pyautogui` to perform actions based on the given observations.\n- **DO NOT** use `pyautogui.locateCenterOnScreen()` to locate elements, as images of elements are not available.\n- **DO NOT** use `pyautogui.screenshot()` to take screenshots.\n- Your actions should be time-efficient. When predicting multiple lines of code, introduce short pauses like `time.sleep(0.5)` where necessary to ensure stability.\n- Each action must be a complete piece of code with no variable or function dependencies from history.\n- You must determine the necessary screen coordinates yourself based on observations but ensure accuracy.\n\n\n## TASK:\nCan you make Bing the default search engine when performing searches on the internet?\n\n",
                            "valid_entries": [
                                "observation",
                                "response"
                            ]
                        },
                        {
                            "name": "advisor",
                            "handler_type": "environment",
                            "prompt_header": "You are the Advisor, an intelligent assistant responsible for helping the Executor complete tasks by providing guidance and executing commands when necessary.\n\n## Capabilities and Constraints:\n- When the Executor asks a question using:\n  QUERY\n  ```\n  <question>\n  ```\n  Respond with:\n  RESPONSE\n  ```\n  <detailed answer>\n  ```\n- You may also interact with the environment by executing commands when needed:\n  EXECUTE\n  ```python\n  <command>\n  ```\n- Each message must contain only one type of output—either RESPONSE or EXECUTE, but not both.\n- Your responses should be clear, detailed, and grounded in the provided observations.\n- Do not provide unnecessary or speculative answers; base responses strictly on known data.\n- Prioritize accuracy and efficiency when responding.\n\n## Execution Context:\n- You receive observations from the environment, which may include system responses, accessibility tree data (based on the AT-SPI library), or output from executed commands.\n- If an execution command is required, ensure it aligns with the Executor’s needs and the available system state.\n- Avoid unnecessary execution requests and only run commands when they are essential to fulfilling the Executor’s query.\n- You are required to use `pyautogui` for interactions with the system.\n- **DO NOT** use `pyautogui.locateCenterOnScreen()` to find elements, as image-based detection is unavailable.\n- **DO NOT** use `pyautogui.screenshot()` to capture screen images.\n- Ensure time efficiency in command execution. Introduce short pauses like `time.sleep(0.5)` when executing multiple lines of code to ensure stability.\n- Each execution must be independent, without relying on previously defined variables or functions.\n- Specify screen coordinates manually based on observations, ensuring accuracy.\n\nYour responses will be provided to the Executor to assist them in completing their assigned task.",
                            "valid_entries": [
                                "observation",
                                "query"
                            ]
                        }
                    ],
                    "graph": {
                        "nodes": [
                            {
                                "id": "START",
                                "type": "START"
                            },
                            {
                                "id": "executor",
                                "type": "PLAYER",
                                "role_index": 0
                            },
                            {
                                "id": "advisor",
                                "type": "PLAYER",
                                "role_index": 1
                            },
                            {
                                "id": "END",
                                "type": "END"
                            }
                        ],
                        "edges": [
                            {
                                "from": "START",
                                "to": "executor",
                                "type": "STANDARD",
                                "description": "START → executor"
                            },
                            {
                                "from": "executor",
                                "to": "advisor",
                                "type": "DECISION",
                                "condition": {
                                    "condition_type": "query"
                                },
                                "description": "executor → advisor (query)"
                            },
                            {
                                "from": "advisor",
                                "to": "executor",
                                "type": "DECISION",
                                "condition": {
                                    "condition_type": "response"
                                },
                                "description": "advisor → executor (response)"
                            },
                            {
                                "from": "executor",
                                "to": "executor",
                                "type": "DECISION",
                                "condition": {
                                    "condition_type": "pyautogui_actions"
                                },
                                "description": "executor → executor (pyautogui_actions)"
                            },
                            {
                                "from": "advisor",
                                "to": "advisor",
                                "type": "DECISION",
                                "condition": {
                                    "condition_type": "pyautogui_actions"
                                },
                                "description": "advisor → advisor (pyautogui_actions)"
                            },
                            {
                                "from": "executor",
                                "to": "END",
                                "type": "DECISION",
                                "condition": {
                                    "condition_type": "done_or_fail"
                                },
                                "description": "executor → END (done_or_fail)"
                            }
                        ],
                        "anchor_node": "executor"
                    },
                    "task_config": {
                        "id": "bb5e4c0d-f964-439c-97b6-bdb9747de3f4",
                        "snapshot": "chrome",
                        "instruction": "Can you make Bing the main search thingy when I look stuff up on the internet?",
                        "source": "https://support.google.com/chrome/answer/95426?sjid=16867045591165135686-AP",
                        "config": [
                            {
                                "type": "launch",
                                "parameters": {
                                    "command": [
                                        "google-chrome",
                                        "--remote-debugging-port=1337"
                                    ]
                                }
                            },
                            {
                                "type": "launch",
                                "parameters": {
                                    "command": [
                                        "socat",
                                        "tcp-listen:9222,fork",
                                        "tcp:localhost:1337"
                                    ]
                                }
                            }
                        ],
                        "trajectory": "trajectories/",
                        "related_apps": [
                            "chrome"
                        ],
                        "evaluator": {
                            "func": "exact_match",
                            "result": {
                                "type": "default_search_engine"
                            },
                            "expected": {
                                "type": "rule",
                                "rules": {
                                    "expected": "Bing"
                                }
                            }
                        }
                    }
                }
            ]
        }
    ]
}